#3.2.1.14
total_blocks = int(input("Enter the total number of blocks: "))

line_of_blocks = 1 # line of blocks will start from 1
height = 0 # height must be defined from 0 to start

while line_of_blocks <= total_blocks: # while loop will run until no more lines can be completed
    if total_blocks <= 2: # if only 2 blocks a piramid cannot be bulit
        print ("you need at least 3 blocks to build a pyrimad!")
        break # stops programme
    else:
        total_blocks -= line_of_blocks # removes current line of blocks from total blocks 1,2,3 etc
        line_of_blocks += 1 # increses the blocks by 1 each while loop
    
        height += 1 # increses the height to match the number of lines each while loop

print("The height of the pyramid:", height)


# 3.2.1.15
c0 = int(input("input a number "))# inputs number
counter = 0 # defines counter

while c0 > 1: # while loop will continue until c0 = 1
    if c0 %2 != 1: c0 = c0 // 2 # calculates if c0 is an even number

    else: c0 = c0 * 3 + 1

    counter += 1 # adds 1 to the counter per while loop

    print (c0) # prints current value of c0
                
print ("number of steps = ", counter) # when number reaches 1, while loop ends and result printed

#################### FLAGS ########################################
#create a flag with a set flag 
                                  # 0000 0000 0000 x000
flag_registerA = 0x1234 #flag reset 0001 0010 0011 0100
flag_registerB = 0x1248 #flag set   0001 0010 0100 1000


#create an appropriate mask 
mask = 8                          # 0000 0000 0000 1000


#1 use & to check if flag set/reset 

if flag_registerB & mask: # returns 8/True if set, 0/False if not
    print("Windmill is on") #executed if true
else:
    print("windmill is offf") #executed if false


#2 reset(assign zero) to bit 

flag_registerB = flag_registerB & ~mask #turns off the windmill


#check 2

if flag_registerB & mask: # returns 8/True if set, 0/False if not
    print("Windmill is on") #executed if true
else:
    print("windmill is offf") #executed if false

#3 use | to assign bit to 1 

x | 1 = 1
x | 0 = x

#check 3


#4 use ^ to make it the opposite/negate your bit

x ^ 1 = ~x
x ^ 0 = x

#check 4

#5 use ^ to make it the opposite/negate your bit

#check 5

#The above should output (ingoring the # of course)
#bit is set
#bit is reset
#bit is set
#bit is reset
#bit is set
#Press any key to continue . . .
