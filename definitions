#4.3.1.6
def is_year_leap(year):
    if year % 4 != 0: #If the year isn't evenly divisible by 4 its not a leap year
        return False
    elif year % 100 != 0: # If the year isn't evenly divisible by 100 its not a leap year
        return False 
    elif year % 400 != 0: # If the year isn't evenly divisible by 400 its not a leap year
        return False
    elif year < 1582: # If year is before 1582 the georgian calender wasn't invented
        return False
    else:
        return True # year has passed all four checks and is a leap year - return true!

test_data = [1900, 2000, 2016, 1987]
test_results = [False, True, True, False]
for i in range(len(test_data)):
	year = test_data[i]
	print(year,"-> ",end="")
	result = is_year_leap(year)
	if result == test_results[i]:
		print("OK")
	else:
		print("Failed")

#4.3.1.7
def is_year_leap(year):
    
    if year % 4 != 0: #If the year isn't evenly divisible by 4 its not a leap year
        return False
    elif year % 100 != 0: # If the year isn't evenly divisible by 100 its not a leap year
        return False 
    elif year % 400 != 0: # If the year isn't evenly divisible by 400 its not a leap year
        return False
    elif year < 1582: # If year is before 1582 the georgian calender wasn't invented
        return False
    else:
        return True # year has passed all four checks and is a leap year - return true!

def days_in_month(year,month):
    
	if year < 1582 or month < 1 or month > 12: # returns none if error inputted
		return None
	days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]
	# jan,feb,mar,apr,may,jun,jul,aug,sep,oct,nov,dec
	result = days[month -1] # refernces month in list...WHY -1? location 0 to 11 instead of 1 to 12?
	print ("this is", result)
	if month == 2 and is_year_leap(year): # if month feb, and is leap year, return 29 days
		result = 29
	return result

test_years = [1900, 2000, 2016, 1987]
test_months = [ 2, 2, 1, 11]
test_results = [28, 29, 31, 30]
for i in range(len(test_years)):
	yr = test_years[i]
	mo = test_months[i]
	print(yr,mo,"-> ",end="")
	result = days_in_month(yr, mo)
	if result == test_results[i]:
		print("OK")
	else:
		print("Failed")


#4.3.1.8
def is_year_leap(year):
    
    if year % 4 != 0: #If the year isn't evenly divisible by 4 its not a leap year
        return False
    elif year % 100 != 0: # If the year isn't evenly divisible by 100 its not a leap year
        return False 
    elif year % 400 != 0: # If the year isn't evenly divisible by 400 its not a leap year
        return False
    elif year < 1582: # If year is before 1582 the georgian calender wasn't invented
        return False
    else:
        return True # year has passed all four checks and is a leap year - return true!

def days_in_month(year,month):
    
	if year < 1582 or month < 1 or month > 12: # returns none if error inputted
		return None
	days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]
	# jan,feb,mar,apr,may,jun,jul,aug,sep,oct,nov,dec
	result = days[month -1] # refernces month in list, 0 - 11 to 1 - 12.
	if month == 2 and is_year_leap(year): # if month feb, and is leap year, return 29 days
		result = 29
	return result

def day_of_year(year, month, day): 

	# validate inputs :-
	if year < 1582:
		return None
	if month < 1 or month > 12:
		return None
	if day < 0 or day > 31:
		return None

	# calculate days :-
	total_days = day
	month = month -1
	while month > 0:
		total_days += days_in_month(year,month)
		month -= 1
	return total_days


print(day_of_year(2000, 12, 31))

#4.3.1.9
def is_prime(num):
    if num > 1: # if number is greater than 1 enter the loop
        for i in range (2, num): # initialise loop starting at 2 ending at the inputted number
            if num % i == 0: # check if num is divisable by 2 & repeat for all numbers in the range(-1)
            # if number is divisable by any number in the sequence it is not a prime number
                return False # returns false - it is not a prime number
        else: return True # is a prime number as has failed the loop (not divisable by any other num)

for i in range(1, 20):
	if is_prime(i + 1):
			print(i + 1, end=" ")
print()

